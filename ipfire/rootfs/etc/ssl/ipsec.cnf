#
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
#

# This definition stops the following lines choking if HOME isn't
# defined.
HOME			= .
RANDFILE		= $ENV::HOME/.rnd




# Extra OBJECT IDENTIFIER info:
#oid_file		= $ENV::HOME/.oid
oid_section		= new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions		= 
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca' and 'req'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=${testoid1}.5.6

####################################################################
[ ca ]
default_ca	= root_ca		# The default ca section

####################################################################
[ root_ca ]

dir			= /etc/ssl/root_ca	# Where everything is kept
certs		= $dir/certs		# Where the issued certs are kept
new_certs_dir = $dir/newcerts		# default place for new certs.
database	= $dir/index.db		# database index file.
certificate	= $dir/root_ca.pem 	# The CA certificate
serial		= $dir/serial 		# The current serial number
private_key	= $dir/private/root_ca.key# The private key
default_days	= 3650			# how long to certify for
default_md	= sha256			# which md to use.
preserve	= no			# keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy		= policy_match


#l'autorité de certification intermédiaire pour les services web valable 10 ans
[ web_ca ]
dir             = /etc/ssl/web_ca
certs           = $dir/certs  
new_certs_dir   = $dir/newcerts
database        = $dir/index.db
certificate     = $dir/web_ca.pem 
serial          = $dir/serial
private_key     = $dir/private/web_ca.key
default_days    = 3650
default_md      = sha256
preserve        = no  
policy          = policy_anything

#l'autorité de certification intermédiaire pour le service ipsec valable 1 ans
[ ipsec_ca ]
dir             = /etc/ssl/ipsec_ca
certs           = $dir/certs  
new_certs_dir   = $dir/newcerts
database        = $dir/index.db
certificate     = $dir/ipsec_ca.pem 
serial          = $dir/serial
private_key     = $dir/private/ipsec_ca.key
default_days    = 365
default_md      = sha256
preserve        = no  
policy          = policy_anything

# For the CA policy
[ policy_match ]

countryName             = match
stateOrProvinceName     = optional
localityName			= optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional



# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName			= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName = optional
commonName			= supplied
emailAddress		= optional

####################################################################
[ req ]
default_bits		= 1024
# default_keyfile 	= privkey.pem
distinguished_name	= req_distinguished_name
# attributes		= req_attributes
# x509_extensions	= v3_ca	# The extentions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options. 
# default: PrintableString, T61String, BMPString.
# pkix	 : PrintableString, BMPString.
# utf8only: only UTF8Strings.
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: current versions of Netscape crash on BMPStrings or UTF8Strings
# so use this option with caution!
# string_mask = nombstr

# req_extensions = v3_req # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
countryName_default		= FR
countryName_min			= 2
countryName_max			= 2

stateOrProvinceName		= State or Province Name (full name)
# stateOrProvinceName_default	= Paris

localityName			= Locality Name (eg, city)
# localityName_default	= Paris
organizationName		= Organization Name (eg, company)
organizationName_default	= Org.


organizationalUnitName		= Organizational Unit Name (eg, section)
# organizationalUnitName_default	= Org. Certification Authority

commonName			= Common Name (eg, YOUR name)
commonName_max			= 64
# commonName_default = Org. Intermediate CA for Web Service
emailAddress			= Email Address
emailAddress_max		= 40

# SET-ex3			= SET extension number 3

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 4
challengePassword_max		= 20

unstructuredName		= An optional company name

# mkdir -p /etc/ssl/{ipsec_ca,root_ca,web_ca}/{certs,crl,newcerts,private}
# touch /etc/ssl/{root_ca,web_ca,ipsec_ca}/{index.db,serial}
# rm -R /etc/ssl/{root_ca,web_ca,ipsec_ca}

[ROOT_CA]
nsComment                       = "ROOT CA"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
basicConstraints                = critical,CA:TRUE,pathlen:1
keyUsage                        = keyCertSign, cRLSign

#PassPhrase xdp*$Pg47t!QQ
# CN Org Certification Authority
# OU = Secure Digital Certificate Signing
# organizationalUnitName_default	= Secure Digital Certificate Signing
# cd /etc/ssl/root_ca
# openssl req -x509 -config /etc/ssl/openssl.cnf -newkey rsa:8192 -sha256 -extensions ROOT_CA -days 3650 -keyout private/root_ca.key -out root_ca.pem
#   
#  / \
# / ! \	     Nous allons ensuite initialiser le serial par un nombre aléatoire
#/_____\
#            openssl x509 -serial -noout -in root_ca.pem | cut -d= -f2 > serial
# 

#### FIN ROOT CA
#chmod -R 600 /etc/ssl/{root_ca,ipsec_ca,web_ca}/private


[WEB_CA]
nsComment                       = "WEB CA"
basicConstraints                = critical,CA:TRUE,pathlen:0
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
issuerAltName                   = issuer:copy
keyUsage                        = keyCertSign, cRLSign
nsCertType                      = sslCA

# CN = Org Intermediate CA for Web Service
# OU = Org Certification Authority
# cd /etc/ssl/web_ca
# openssl req -newkey rsa:8192 -sha256 -keyout private/web_ca.key -out web_ca.req

# Puis on signe le certificat en utilisant la ca par défaut (défini dans le fichier openssl.cnf), c'est-à-dire, la CA_ROOT. 
# Notez qu'on précise qu'il faut configurer ce nouveau certificat en utilisant la section WEB_CA du fichier de configuration.
#openssl ca -extensions WEB_CA -in web_ca.req -out web_ca.pem

# On génère le serial de web_ca
#openssl x509 -serial -noout -in web_ca.pem | cut -d= -f2 > serial

#chmod -R 600 /etc/ssl/{root_ca,ipsec_ca,web_ca}/private

# FIN WEB_CA

[IPSEC_CA]
nsComment                       = "IPSEC CA"
basicConstraints                = critical,CA:TRUE,pathlen:0
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
issuerAltName                   = issuer:copy
keyUsage                        = keyCertSign, cRLSign
nsCertType                      = sslCA

#CAROOT PassPhrase xdp*$Pg47t!QQ


#PassPhrase allo*$MP!:ll
# CN = Org Intermediate CA for IPSec Service
# OU = Org Certification Authority
# cd /etc/ssl/ipsec_ca
# openssl req -newkey rsa:8192 -sha256 -keyout private/ipsec_ca.key -out ipsec_ca.req

# Puis on signe le certificat en utilisant la ca par défaut (défini dans le fichier openssl.cnf), c'est-à-dire, la CA_ROOT. 
# Notez qu'on précise qu'il faut configurer ce nouveau certificat en utilisant la section IPSEC_CA du fichier de configuration.
#openssl ca -extensions IPSEC_CA -in ipsec_ca.req -out ipsec_ca.pem

# On génère le serial de ipsec_ca
#openssl x509 -serial -noout -in ipsec_ca.pem | cut -d= -f2 > serial

#chmod -R 600 /etc/ssl/{root_ca,ipsec_ca,web_ca}/private

# FIN IPSEC_CA


[IPFIRE_WEBADMIN]
nsComment                       = "Certificate for web administration service of ipfire"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
issuerAltName                   = issuer:copy
subjectAltName                  = DNS:ipfire, DNS:ipfire.org.fr,DNS:192.168.10.1,DNS:10.0.0.1
basicConstraints                = critical,CA:FALSE
keyUsage                        = critical, digitalSignature, nonRepudiation, keyEncipherment
nsCertType                      = server
extendedKeyUsage                = serverAuth

# CN = ipfire
# OU = Secure Digital Certificate Signing
# cd /etc/ssl/web_ca/
# openssl req -newkey rsa:4096 -sha256 -keyout ipfire_webadmin.key -out ipfire_webadmin.req
# Puis on signe le certificat. L'option -name permet de préciser qu'il faut utiliser l'autorité web_ca pour signer notre nouveau certificat.
# openssl ca -name web_ca -extensions IPFIRE_WEBADMIN -in ipfire_webadmin.req -out ipfire_webadmin.pem

# FIN IPFIRE_SSL


[IPFIRE_IPSEC]
nsComment                       = "Certificat Serveur IPSec"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
issuerAltName                   = issuer:copy
subjectAltName = @alt_names
basicConstraints                = critical,CA:FALSE
keyUsage                        = digitalSignature, nonRepudiation, keyEncipherment
nsCertType                      = server
extendedKeyUsage                = serverAuth

[alt_names]
DNS.1 = 10.10.100.8


# OU = Secure Digital Certificate Signing for IPSec-Strongswan
# On peut maintenant créer des certificats et les signer avec notre autorité intermédiaire. Pour générer la clé privé et la demande de certificat :
# openssl genrsa  -out private/ipfire_ipsec.key 4096
# openssl req -key private/ipfire_ipsec.key -sha256 -out ipfire_ipsec.req -new -nodes
# Puis on signe le certificat. L'option -name permet de préciser qu'il faut utiliser l'autorité ipsec_ca pour signer notre nouveau certificat.
# openssl ca -name ipsec_ca -extensions IPFIRE_IPSEC -in ipfire_ipsec.req -out ipfire_ipsec.pem


[CLIENT_IPSEC]
nsComment                       = "Certificat Client IPSec"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
issuerAltName                   = issuer:copy
# subjectAltName                  = critical,email:copy,email:user-bis@domain.com,email:user-ter@domain.com
basicConstraints                = critical,CA:FALSE
keyUsage                        = digitalSignature, nonRepudiation
nsCertType                      = client
extendedKeyUsage                = clientAuth

# On peut maintenant créer des certificats et les signer avec notre autorité intermédiaire. Pour générer la clé privé et la demande de certificat :
# openssl genrsa  -out private/julien_windows_ipsec.key 4096
# openssl req -key private/julien_windows_ipsec.key -sha256 -out julien_windows_ipsec.req -new -nodes
# openssl ca -name ipsec_ca -extensions CLIENT_IPSEC -in julien_windows_ipsec.req -out julien_windows_ipsec.pem
# openssl pkcs12 -export -inkey private/julien_windows_ipsec.key -in julien_windows_ipsec.pem -name "windows.org.fr" -certfile ipsec_ca.pem -caname "org.fr" -out windows.p12


# openssl genrsa  -out private/julien_iphone_ipsec.key 4096
# openssl req -key private/julien_iphone_ipsec.key -sha256 -out julien_iphone_ipsec.req -new -nodes
# openssl ca -name ipsec_ca -extensions CLIENT_IPSEC -in julien_iphone_ipsec.req -out julien_iphone_ipsec.pem
# openssl pkcs12 -export -inkey private/julien_iphone_ipsec.key -in julien_iphone_ipsec.pem -name "iphone_de_julien.org.fr" -certfile ipsec_ca.pem -caname "org.fr" -out iphone_de_julien.p12

# openssl genrsa  -out private/iphonedelydia.key 4096
# openssl req -key private/iphonedelydia.key -sha256 -out iphonedelydia.req -new -nodes
# openssl ca -name ipsec_ca -extensions CLIENT_IPSEC -in iphonedelydia.req -out iphonedelydia.pem
# openssl pkcs12 -export -inkey private/iphonedelydia.key -in iphonedelydia.pem -name "iphonedelydia.org.fr" -certfile ipsec_ca.pem -caname "org.fr" -out iphonedelydia.p12


#[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

#basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
#nsCertType			= server

# For an object signing certificate this would be used.
#nsCertType = objsign

# For normal client use this is typical
#nsCertType = client, email

# and for everything including object signing:
#nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
#keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
#nsComment			= "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
#subjectKeyIdentifier=hash
#authorityKeyIdentifier=keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
#subjectAltName=email:copy

# Copy subject details
#issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# This really needs to be in place for it to be a proxy certificate.
#proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo
[ v3_req ]

# Extensions to add to a certificate request

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]


# Extensions for a typical CA


# PKIX recommendation.

subjectKeyIdentifier=hash

authorityKeyIdentifier=keyid:always,issuer:always

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints = critical,CA:true
# So we do this instead.
basicConstraints = CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
# keyUsage = cRLSign, keyCertSign

# Some might want this also
# nsCertType = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName=email:copy
# Copy issuer details
# issuerAltName=issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj=DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints= critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always,issuer:always
