#!/bin/bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} -a Root -c -s -o
#+    ${SCRIPT_NAME} -a Root -m ocsp.example.com
#+    ${SCRIPT_NAME} -a Root -r ocsp.example.com
#+    ${SCRIPT_NAME} -a Int1 -m mysite.example.com
#+
#% DESCRIPTION
#% Script helping to generate and manage SSL certificates.
#%
#% OPTIONS
#%    -a $name --authority $name                        Create a new authority or choose an existing authority
#%    -p $name --parent    $name                        Relative parent only used when create authority
#%    -m $CN                                            show cert
#%    -s $CN | --server $CN                             Add nsCertType server and extendedKeyUsage serverAuth
#%    -c $CN | --client $CN                             Add nsCertType client and extendedKeyUsage clientAuth
#%    -o $CN | --ocsp   $CN                             Add extendedKeyUsage OCSPSigning
#%    -r $CN | --revoke $CN                             Revoke cert
#%    -f                                                Create fast without question C/O/OU/C/L/ST/emailAddress
#%    -h                                                print this help
#%    -v                                                verbose
#%
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} 1.0
#-    author          Julien BLAIS
#-    license         GNU General Public License
#-
#================================================================
#  HISTORY
#     2019/12/29 : Passage a la version 1.0
#
#================================================================
#  DEBUG OPTION
# set -n  # Uncomment to check your syntax, without execution.
# set -x  # Uncomment to debug this shell script
#
#================================================================
# END_OF_HEADER
#================================================================

SSL_DIR="${HOME}/ssl"
KEY_DIR="${HOME}/.keys"
bits=8192
days=365
ocsp=


# typeset -A SSL_FLD
# Ordre ou sont posees les questions
SSL_FLD=(
    O
    OU
    C
    L
    ST
    emailAddress
)

#============================
#  FUNCTIONS
#============================
#============================
#  FUNCTIONS Creation de repertoire
#============================
CheckAndCreateFolder(){

    if [ ! -d "${1}" ];then
        mkdir -p "${1}"
        chgrp ssl-cert "${1}"
    else
        echo "${SCRIPT_NAME}: Config folder created ${1}" 1>&2
    fi
}
#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintOCSPServerConf(){
printf "
[ v3_OCSP ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = OCSPSigning
"
}
#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintMinimalConf(){
printf "

[ req ]
distinguished_name = req_distinguished_name

[ req_distinguished_name ]

# [ v3_req ]
# basicConstraints = CA:FALSE
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment
# extendedKeyUsage = serverAuth, clientAuth, OCSPSigning



[ policy_match ]
countryName             = match
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional



[ tmp_ca ]
dir             = ${WK_DIR}
certs           = \$dir/certs
crl_dir         = \$dir/crl
database        = \$dir/index.txt
new_certs_dir   = \$dir/newcerts
certificate     = \$dir/cacert.pem
serial          = \$dir/serial
crlnumber       = \$dir/crlnumber
crl             = \$dir/crl.pem
private_key     = \$dir/private/cakey.pem
RANDFILE        = \$dir/private/.rand
x509_extensions = usr_cert
name_opt        = ca_default
cert_opt        = ca_default
default_days    = 365
default_crl_days= 30
default_md      = default               # use public key default MD
preserve        = no                    # keep passed DN ordering
policy          = policy_match

# Ajout de la partie suivante pour signer un certif d'autorite enfant
[ ca ]
default_ca      = tmp_ca
"


}
#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
Print_V3CAConf(){
printf "

[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = critical,CA:true
keyUsage = cRLSign, keyCertSign
nsCertType = sslCA, emailCA
"
}
#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintCAConf(){
printf "

[ ca_ext ]
keyUsage = critical,keyCertSign,cRLSign
basicConstraints = critical,CA:true
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
"
}
#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintCertConf(){
printf "
[cert]
subjectKeyIdentifier              = hash
authorityKeyIdentifier            = keyid,issuer:always
issuerAltName                     = issuer:copy
basicConstraints                  = critical,CA:FALSE
keyUsage                          = digitalSignature, nonRepudiation, keyEncipherment
extendedKeyUsage                  = ${extendedKeyUsage}
nsComment                         = \"OpenSSL Generated Certificate\"
"
if [ "${nsCertType}" != "" ];then
printf "nsCertType                        = ${nsCertType}
"
fi
if [ "${ocsp}" != "" ]; then
    printf "authorityInfoAccess = OCSP;URI:http://${ocsp}
"
fi
if [ "${flagOptServeur}" = "1" ];then
printf "subjectAltName                    = @alt_names

[alt_names]
${alt_names}
"
fi
}
#============================
#  FUNCTIONS Creation d'un certificat d'autorite
#============================
CreerAutorite(){
    C=""
    ST=""
    L=""
    emailAddress=""

    if [ ${flagOptParent} -eq 1 ];then

        WK_DIR="${SSL_DIR}/${OptParent}"
        # Extraction du Subject du parent
        SUB=$(openssl x509 -noout -subject -in ${WK_DIR}/cacert.pem)

        # Formatage pour extraction des differents champs OU/C/O/L/ST/emailAddress
        WK_SUB=$(echo ${SUB#*=} | sed -e "s/\ =\ /='/g"|sed -e "s/, /',/g"|sed 's/[[:blank:]]*$//')\'

        # On compte le nombre de champ a extraire par le caractere ","
        COUNTER=$(($(echo ${WK_SUB} | grep -o "," | wc -l)+1))

        if [ "${COUNTER}" -gt "0" ];then
            for ((i=1;i<=${COUNTER};i++));
            do
                eval $(cut -d "," -f $i <<< ${WK_SUB})
            done
        fi
        WK_DIR="${SSL_DIR}/${OptAutorite}"
    else
        O=${OptAutorite}
    fi
    CN="${OptAutorite} - Certification Authority Root"
    OU="Secure Digital Certificate Signing"

    for field in ${SSL_FLD[@]}
    do
        read -p "Please enter a new value or enter to confirm ${field}=${!field} : " NEW_VALUE
        if [[ "${NEW_VALUE}" != "" ]];then
            eval "${field}=${NEW_VALUE}"
        fi
    done

    read -p "Please enter a URL for ocsp serveur : " ocsp
    if [[ "ocsp" != "" ]];then
        echo "ocsp=${ocsp}" > "${WK_DIR}/default"
    fi

    [ "${C}" = "" ] ||subj="/C=${C}"
    [ "${ST}" = "" ]||subj="${subj}/ST=${ST}"
    [ "${L}" = "" ] ||subj="${subj}/L=${L}"
    [ "${O}" = "" ] ||subj="${subj}/O=${O}"
    [ "${OU}" = "" ]||subj="${subj}/OU=${OU}"
    [ "${emailAddress}" = "" ]||subj="${subj}/emailAddress=${emailAddress}"
    subj="${subj}/CN=${CN}"

    CheckAndCreateFolder "${WK_DIR}/certs"
    CheckAndCreateFolder "${WK_DIR}/crl"
    CheckAndCreateFolder "${WK_DIR}/newcerts"
    CheckAndCreateFolder "${WK_DIR}/private"
    CheckAndCreateFolder "${WK_DIR}/p12"

    chmod -R 750 "${WK_DIR}/private"
    touch "${WK_DIR}/index.txt"
    touch "${WK_DIR}/serial"
    RANDPASS=$(date | md5sum |  cut -c1-16)
    touch "${KEY_DIR}/${OptAutorite}.key"
    echo "$RANDPASS" >  "${KEY_DIR}/${OptAutorite}.key"
    openssl genrsa -out "${WK_DIR}/private/cakey.pem" -passout file:"${KEY_DIR}/${OptAutorite}.key" ${bits}


    # Soit le nouveau certificat d'autorite a un parent => certificat d'autorite intermediaire
    if [ ${flagOptParent} -eq 1 ];then

        # Creation d'un CSR...
        openssl req -new -out "${SSL_DIR}/${OptAutorite}/CA.csr" -key "${SSL_DIR}/${OptAutorite}/private/cakey.pem" -subj "${subj}" -config <(PrintMinimalConf)

        # On switch sur la conf parent
        WK_DIR="${SSL_DIR}/${OptParent}"

        # La certif parent signe avec sa cle
        openssl ca -batch -days ${days} -create_serial -passin file:"${KEY_DIR}/${OptParent}.key" -in "${SSL_DIR}/${OptAutorite}/CA.csr" -out "${SSL_DIR}/${OptAutorite}/cacert.pem.backup" -extensions ca_ext -notext -config <(PrintMinimalConf;PrintCAConf)

        # On cree la chaine CA Racine + celui qu'on vient de creer.
        cat "${SSL_DIR}/${OptAutorite}/cacert.pem.backup" "${WK_DIR}/cacert.pem" > "${SSL_DIR}/${OptAutorite}/cacert.pem"

        # On switch sur la nouvelle autorite
        WK_DIR="${SSL_DIR}/${OptAutorite}"
    else
        # Soit le certificat est bien racine / pas de parent
        openssl req -x509 -sha512 -extensions v3_ca -days ${days} -subj "${subj}" -key "${WK_DIR}/private/cakey.pem" -out "${WK_DIR}/cacert.pem" -config <(PrintMinimalConf;Print_V3CAConf)
    fi

    chgrp ssl-cert "${WK_DIR}/private/cakey.pem"
    chgrp ssl-cert "${WK_DIR}/cacert.pem"
    chmod 400 "${WK_DIR}/private/cakey.pem"
    chmod 444 "${WK_DIR}/cacert.pem"
    openssl x509 -serial -noout -in "${WK_DIR}/cacert.pem" | cut -d= -f2 > "${WK_DIR}/serial"
    printf "%X\n" $((0x`cat "${WK_DIR}/serial"`+1))>"${WK_DIR}/serial"
}
#============================
#  FUNCTIONS Revoke un certificat
#============================
RevokeCertificat(){
echo "Repertoire de travail: ${WK_DIR}"
openssl ca -revoke "${WK_DIR}/certs/${OptRevokeCert}.pem" -name tmp_ca -passin file:"${KEYFILE}"  -config <(PrintMinimalConf)

mv "${WK_DIR}/certs/${OptRevokeCert}.pem"  "${WK_DIR}/certs/${OptRevokeCert}.pem.${DATE}.drop"
mv "${WK_DIR}/private/${OptRevokeCert}.key"  "${WK_DIR}/private/${OptRevokeCert}.key.${DATE}.drop"
}
#============================
#  FUNCTIONS Creer un certificat
#============================
CreerCertificat(){

    # Extraction du Subject
    SUB=$(openssl x509 -noout -subject -in "${WK_DIR}/cacert.pem")

    # Formatage pour extraction des differents champs OU/C/O/L/ST/emailAddress
    WK_SUB=$(echo ${SUB#*=} | sed -e "s/\ =\ /='/g"|sed -e "s/, /',/g"|sed 's/[[:blank:]]*$//')\'

    # On compte le nombre de champ a extraire par le caractere ","
    COUNTER=$(($(echo ${WK_SUB} | grep -o "," | wc -l)+1))

    C=""
    ST=""
    L=""
    O=""
    OU=""
    emailAddress=""

    if [ "${COUNTER}" -gt "0" ];then
        for ((i=1;i<=${COUNTER};i++));
        do
            eval $(cut -d "," -f $i <<< ${WK_SUB})
        done
    fi

    if [ ${flagOptFast} -eq 0 ];then
        for field in ${SSL_FLD[@]}
        do
            read -p "Please enter a new value or enter to confirm ${field}=${!field} : " NEW_VALUE
            if [[ "${NEW_VALUE}" != "" ]];then
                $(${field}=${NEW_VALUE})
            fi
        done
    fi
    extendedKeyUsage=""
    nsCertType=""
    if [ ${flagOptClient} -eq 1 ];then
        nsCertType="client"
        extendedKeyUsage="clientAuth"
    fi
    if [ ${flagOptServeur} -eq 1 ];then
        [[ "${nsCertType}" != "" ]] && nsCertType="${nsCertType}, server"
        [[ "${nsCertType}" == "" ]] && nsCertType="server"
        [[ "${extendedKeyUsage}" != "" ]] && extendedKeyUsage="${extendedKeyUsage}, serverAuth"
        [[ "${extendedKeyUsage}" == "" ]] && extendedKeyUsage="serverAuth"
    fi
    if [ ${flagOptOCSP} -eq 1 ];then
        [[ "${extendedKeyUsage}" != "" ]] && extendedKeyUsage="${extendedKeyUsage}, OCSPSigning"
        [[ "${extendedKeyUsage}" == "" ]] && extendedKeyUsage="OCSPSigning"
    fi
    index=0
    [ "${C}" = "" ] ||subj="/C=${C}"
    [ "${ST}" = "" ]||subj="${subj}/ST=${ST}"
    [ "${L}" = "" ] ||subj="${subj}/L=${L}"
    [ "${O}" = "" ] ||subj="${subj}/O=${O}"
    [ "${OU}" = "" ]||subj="${subj}/OU=${OU}"
    [ "${emailAddress}" = "" ]||subj="${subj}/emailAddress=${emailAddress}"
    if [ "${OptCN}" != "" ]; then
        OLDIFS=$IFS
        IFS=';'

        read -ra field <<< $OptCN
        for CommonName in "${field[@]}";
        do
            if [[ "${firstCN}" == ""  ]];then
            # alt_names="DNS.${index}:${CommonName}"
                firstCN=${CommonName}
                index=$((${index}+1))
                alt_names="DNS.${index}=${CommonName}"
            else
                index=$((${index}+1))
                alt_names="${alt_names}\nDNS.${index}=${CommonName}"
            fi
        done
        IFS=$OLDIFS
        CommonName=""
    else
        # sinon on ajoute un espace pour entrer dans la boucle suivante :)
        CommonName=" "
    fi

    while [ "${CommonName}" != "" ];do
        read -p "CN ${index}:" CommonName
        if [[ "${CommonName}" != "" && "${firstCN}" == ""  ]];then
            firstCN=${CommonName}
            index=$((${index}+1))
            alt_names="DNS.${index}=${CommonName}"
        else
            if [[ "${CommonName}" != "" ]];then
                index=$((${index}+1))
                alt_names="${alt_names}\nDNS.${index}=${CommonName}"
            fi
        fi
    done

    subj="${subj}/CN=${firstCN}"
    firstCN=${firstCN/\*/\\\*}

    if [ -f "${WK_DIR}/private/${firstCN}.key" ];then
        echo "${WK_DIR}/private/${firstCN}.key already exist, continu..." 1>&2
    else
        openssl genrsa  -out "${WK_DIR}/private/${firstCN}.key" ${bits}
    fi

    if [ ! -f "${WK_DIR}/certs/${firstCN}.pem" ];then

        # Creation d'un CSR...
        openssl req -new -sha256 -key "${WK_DIR}/private/${firstCN}.key" -out "${WK_DIR}/newcerts/${firstCN}.csr" -nodes -subj "${subj}" -config  <(PrintMinimalConf)

        # Signature du Certificat d'autorite/racine
        openssl ca -name tmp_ca -batch -passin file:"${KEYFILE}" -extensions cert -in "${WK_DIR}/newcerts/${firstCN}.csr" -out "${WK_DIR}/certs/${firstCN}.pem" -config <(PrintMinimalConf;PrintCertConf)

        RANDPASS=$(date | md5sum |  cut -c1-8)

        openssl pkcs12 -export -password pass:$RANDPASS -inkey "${WK_DIR}/private/${firstCN}.key" -in "${WK_DIR}/certs/${firstCN}.pem" -name "${firstCN}" -certfile "${WK_DIR}/cacert.pem" -caname "${ca}" -out "${WK_DIR}/p12/${firstCN}.p12"

        echo "password : $RANDPASS"
        echo $RANDPASS >  "${WK_DIR}/p12/${firstCN}.passwd"
        chmod 400 "${WK_DIR}/private/${firstCN}.key"
        chmod 444 "${WK_DIR}/certs/${firstCN}.pem"
        chgrp ssl-cert "${WK_DIR}/certs/${firstCN}.pem"
        chgrp ssl-cert "${WK_DIR}/private/${firstCN}.key"
    else
        echo "${WK_DIR}/certs/${firstCN}.pem already exist, continu..." 1>&2
    fi
}

#== BEGIN usage function ==#
usage() {
    printf "Usage: ";
    head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";

}
usagefull() {
    . /etc/default/ssl;
    head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";
}
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }
#== END   usage function ==#


#============================
#  FILES AND VARIABLES
#============================

  #== general variables ==#
SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_ID="$(scriptinfo | grep script_id | tr -s ' ' | cut -d' ' -f3)"
SCRIPT_NAME="$(basename ${0})" # scriptname without path
SCRIPT_UNIQ="${SCRIPT_NAME%.*}.${SCRIPT_ID}.$(date "+%y%m%d%H%M%S").${$}"
SCRIPT_DIR="$( cd $(dirname "$0") && pwd )" # script directory
SCRIPT_DIR_TEMP="/tmp" # Make sure temporary folder is RW

SCRIPT_TIMELOG_FLAG=0
SCRIPT_TIMELOG_FORMAT="+%y/%m/%d@%H:%M:%S"

HOSTNAME="$(hostname)"
FULL_COMMAND="${0} $*"
DATE=$(date +"%Y%m%d")
EXEC_DATE=$(date "+%y%m%d%H%M%S")
EXEC_ID=${$}


  #== flag option menu R7 ==#
flagOptErr=0
flagOptLog=0
flagOptinfo=0
flagOptVerbose=0
flagOptAutorite=0
flagOptDefault=0
flagOptServeur=0
flagOptClient=0
flagOptMenu=1
flagOptDir=0
flagOptParent=0
flagOptOCSP=0
flagOptRevoke=0
flagOptFast=0



#============================
#  PARSE OPTIONS WITH GETOPTS
#============================

  #== set short options ==#
SCRIPT_OPTS='hvsr:ca:-:m:p:of'

  #== set long options associated with short one ==#
typeset -A ARRAY_OPTS
ARRAY_OPTS=(
    [help]=h
    [montre]=m
    [verbose]=v
    [revoke]=r
    [server]=s
    [client]=c
    [authority]=a
    [parent]=p
    [info]=i
    [ocsp]=o
    [fast]=f
)

  #== parse options ==#
while getopts ${SCRIPT_OPTS} OPTION ; do
    if [[ "x$OPTION" == "x-" ]]; then
        LONG_OPTION=$OPTARG
        LONG_OPTARG=$(echo $LONG_OPTION | grep "=" | cut -d'=' -f2)
        LONG_OPTIND=-1
        [[ "x$LONG_OPTARG" = "x" ]] && LONG_OPTIND=$OPTIND || LONG_OPTION=$(echo $OPTARG | cut -d'=' -f1)
        [[ $LONG_OPTIND -ne -1 ]] && eval LONG_OPTARG="\$$LONG_OPTIND"
        OPTION=${ARRAY_OPTS[$LONG_OPTION]}
        [[ "x$OPTION" = "x" ]] &&  OPTION="?" OPTARG="-$LONG_OPTION"

        if [[ $( echo "${SCRIPT_OPTS}" | grep -c "${OPTION}:" ) -eq 1 ]]; then
            if [[ "x${LONG_OPTARG}" = "x" ]] || [[ "${LONG_OPTARG}" = -* ]]; then
                OPTION=":" OPTARG="-$LONG_OPTION"
            else
                OPTARG="$LONG_OPTARG";
                if [[ $LONG_OPTIND -ne -1 ]]; then
                    [[ $OPTIND -le $Optnum ]] && OPTIND=$(( $OPTIND+1 ))
                    shift $OPTIND
                    OPTIND=1
                fi
            fi
        fi
    fi

    #== options follow by another option instead of argument ==#
    if [[ "x${OPTION}" != "x:" ]] && [[ "x${OPTION}" != "x?" ]] && [[ "${OPTARG}" = -* ]]; then
        OPTARG="$OPTION" OPTION=":"
    fi
    #== manage options ==#
    getopts_get_optional_argument() {
        eval next_token=\${$OPTIND}
        if [[ -n $next_token && $next_token != -* ]]; then
            OPTIND=$((OPTIND + 1))
            OPTARG=$next_token
        else
            OPTARG=""
        fi
    }
    case "$OPTION" in
        a ) flagOptMenu=0;flagOptAutorite=1;OptAutorite="${OPTARG}";;

        p ) flagOptMenu=0;flagOptParent=1;OptParent="${OPTARG}";;

        r ) flagOptMenu=0;flagOptRevoke=1;OptRevokeCert="${OPTARG}";;

        o ) flagOptMenu=0;flagOptOCSP=1;;

        f ) flagOptMenu=0;flagOptFast=1;;

        s ) flagOptMenu=0;
            getopts_get_optional_argument $@
            OptCN="${OPTARG}";
            flagOptServeur=1;;

        c ) flagOptMenu=0;
            getopts_get_optional_argument $@
            OptCN=${OPTARG}
            flagOptClient=1;;

        m)  flagOptMenu=0;flagOptMontre=1
            OptCert="${OPTARG}";;

        h ) usagefull
            exit 0;;

        i ) scriptinfo
            exit 0;;

        v ) flagOptVerbose=1
            set -x;;

        : ) echo "${SCRIPT_NAME}: -$OPTARG: option requires an argument"
            flagOptErr=1 ;;

        ? ) echo "${SCRIPT_NAME}: -$OPTARG: unknown option"
            flagOptErr=1 ;;
    esac
done
shift $((${OPTIND} - 1)) ## shift options

#============================
#  MAIN SCRIPT
#============================
if [ ${flagOptMenu} -eq 1 ];then
    usagefull
    exit -1
fi

if [ "${flagOptAutorite}" = "1" ];then
    WK_DIR="${SSL_DIR}/${OptAutorite}"
    KEYFILE="${KEY_DIR}/${OptAutorite}.key"
    if [ ${flagOptParent} -eq 1 ]&&[ ! -d "${SSL_DIR}/${OptParent}" ];then
        echo "The parent directory does not exist, please create the parent authority, exit..". 1>&2 && exit 3;
    fi
    if [ ${flagOptParent} -eq 1 ]&&[ "${OptAutorite}" = "${OptParent}" ];then
        echo "Parent and authority have the same name, exit..." 1>&2 && exit 4;
    fi
    if [ ! -d "${WK_DIR}" ];then
        echo "Nouveau repertoire de travail : ${WK_DIR}"
        if [ ${flagOptFast} -eq 1 ]; then
            echo "The --fast option with the creation of an authority certificate is incompatible" 1>&2 && exit 5;
        fi

        CreerAutorite
    else
        [[ -f "${WK_DIR}/default" ]]&& . "${WK_DIR}/default"
        echo ocsp:$ocsp
        if [ ${flagOptClient} = 1 ]||[ ${flagOptServeur} -eq 1 ]||[ ${flagOptOCSP} -eq 1 ];then
            [[ -r $KEYFILE ]] && CreerCertificat
            [[ -r $KEYFILE ]] || echo $KEYFILE not readable 1>&2 && exit 1;
        else
            if [ ${flagOptRevoke} -eq 1 ];then
                [[ -r $KEYFILE ]] && RevokeCertificat
                [[ -r $KEYFILE ]] || echo $KEYFILE not readable 1>&2 && exit 1;
            else
                if [ ${flagOptMontre} -eq 1 ];then
                    openssl x509 -in "${WK_DIR}/certs/${OptCert}.pem" -noout -text
                else
                    echo "No option specified, exit..." 1>&2 && exit 10;
                fi
            fi
        fi
    fi
else
    echo "No flag autority specified, exit..." 1>&2 && exit 2;
fi
